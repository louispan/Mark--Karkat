This is a mirror of http://www.vim.org/scripts/script.php?script_id=2666

DESCRIPTION
This plugin adds mappings and a :Mark command to highlight several words in
different colors simultaneously, similar to the built-in 'hlsearch'
highlighting of search results and the * command. For example, when you
are browsing a big program file, you could highlight multiple identifiers in
parallel. This will make it easier to trace the source code.

This is a continuation of vimscript #1238 by Yuheng Xie, who doesn't maintain
his original version anymore and recommends switching to this fork. This
plugin offers the following advantages over the original:
- Much faster, all colored words can now be highlighted, no more clashes with
  syntax highlighting (due to use of matchadd()).
- Many bug fixes.
- Jumps behave like the built-in search, including wrap and error messages.
- Like the built-in commands, jumps take an optional [count] to quickly skip
  over some marks.
- Marks can be persisted, and patterns can be added / subtracted from
  mark highlight groups.

SEE ALSO
- SearchAlternatives.vim (vimscript #4146) provides mappings and commands to
  add and subtract alternative branches to the current search pattern.
- SearchHighlighting.vim (vimscript #4320) can change the semantics of the
  start command *, extends it to visual mode (like Mark) and has auto-search
  functionality which instantly highlights the word under the cursor when
  typing or moving around, like in many IDEs.

RELATED WORKS
- MultipleSearch (vimscript #479) can highlight in a single window and in all
  buffers, but still relies on the :syntax highlighting method, which is
  slower and less reliable.
- http://vim.wikia.com/wiki/Highlight_multiple_words offers control over the
  color used by mapping the 1-9 keys on the numeric keypad, persistence, and
  highlights only a single window.
- highlight.vim (vimscript #1599) highlights lines or patterns of interest in
  different colors, using mappings that start with CTRL-H and work on cword.
- quickhl.vim (vimscript #3692) can also list the matches with colors and in
  addition offers on-the-fly highlighting of the current word (like many IDEs
  do).
- Highlight (http://www.drchip.org/astronaut/vim/index.html#HIGHLIGHT) has
  commands and mappings for highlighting and searching, uses matchadd(), but
  limits the scope of highlightings to the current window.
- TempKeyword (vimscript #4636) is a simple plugin that can matchadd() the
  word under the cursor with \0 - \9 mappings. (And clear with \c0 etc.)
- simple_highlighting (vimscript #4688) has commands and mappings to highlight
  8 different slots in all buffers.
- searchmatch (vimscript #4869) has commands and mappings for :[1,2,3]match,
  in the current window only.

HIGHLIGHTING
<Leader>m               Mark the word under the cursor, similar to the star
                        command. The next free highlight group is used.
                        If already on a mark: Clear the mark, like
                        <Leader>n.
{Visual}<Leader>m       Mark or unmark the visual selection.
[N]<Leader>m            With [N], mark the word under the cursor with the
                        named highlight group [N]. When that group is not
                        empty, the word is added as an alternative match, so
                        you can highlight multiple words with the same color.
                        When the word is already contained in the list of
                        alternatives, it is removed.

                        When [N] is greater than the number of defined mark
                        groups, a summary of marks is printed. Active mark
                        groups are prefixed with "*" (or "M*" when there are
                        M pattern alternatives), the default next group with
                        ">", the last used search with "/" (like :Marks
                        does). Input the mark group, accept the default with
                        <CR>, or abort with <Esc> or any other key.
                        This way, when unsure about which number represents
                        which color, just use 99<Leader>n and pick the color
                        interactively!

{Visual}[N]<Leader>m    Ditto, based on the visual selection.

[N]<Leader>r            Manually input a regular expression to mark.
{Visual}[N]<Leader>r    Ditto, based on the visual selection.

<Leader>n               Clear the mark under the cursor.
                        If not on a mark: Disable all marks, similar to
                        :nohlsearch.
[N]<Leader>n            Clear the marks represented by highlight group [N].

:[N]Mark                Clear the marks represented by highlight group [N].
:[N]Mark[!] {pattern}   Mark or unmark {pattern}. Unless [N] is given, the
                        next free highlight group is used for marking.
                        With [N], mark {pattern} with the named highlight
                        group [N]. When that group is not empty, the word is
                        added as an alternative match, so you can highlight
                        multiple words with the same color, unless [!] is
                        given; then, {pattern} overrides the existing mark.
                        When the word is already contained in the list of
                        alternatives, it is removed.
                        For implementation reasons, {pattern} cannot use the
                        'smartcase' setting, only 'ignorecase'.
:Mark                   Disable all marks, similar to :nohlsearch. Marks
                        will automatically re-enable when a mark is added or
                        removed, or a search for marks is performed.

:MarkClear              Clear all marks. In contrast to disabling marks, the
                        actual mark information is cleared, the next mark will
                        use the first highlight group. This cannot be undone.

SEARCHING
[count]*         [count]#
[count]<Leader>* [count]<Leader>#
[count]<Leader>/ [count]<Leader>?
                        Use these six keys to jump to the [count]'th next /
                        previous occurrence of a mark.
                        You could also use Vim's / and ? to search, since the
                        mark patterns are (optionally, see configuration)
                        added to the search history, too.

            Cursor over mark                    Cursor not over mark
---------------------------------------------------------------------------
  <Leader>* Jump to the next occurrence of      Jump to the next occurrence of
            current mark, and remember it       "last mark".
            as "last mark".

  <Leader>/ Jump to the next occurrence of      Same as left.
            ANY mark.

   *        If <Leader>* is the most recently   Do Vim's original * command.
            used, do a <Leader>*; otherwise
            (<Leader>/ is the most recently
            used), do a <Leader>/.

If you work with multiple highlight groups and assign special meaning to them
(e.g. group 1 for notable functions, 2 for variables, 3 for includes), you can
use the 1-9 keys on the numerical keypad to jump to occurrences of a
particular highlight group. With the general * and # commands above, you'd
first need to locate a nearby occurrence of the desired highlight group if
it's not the last mark used.

<k1> .. <k9>            Jump to the [count]'th next occurrence of the mark
                        belonging to highlight group 1..9.
<C-k1> .. <C-k9>        Jump to the [count]'th previous occurrence of the mark
                        belonging to highlight group 1..9.
                        Note that these commands only work when the "Num Lock"
                        indicator of your keyboard is ON; otherwise, the
                        keypad is used for cursor movement.

MARK PERSISTENCE
The marks can be kept and restored across Vim sessions, using the viminfo
file. For this to work, the "!" flag must be part of the 'viminfo' setting:
    set viminfo+=!  " Save and restore global variables.

:MarkLoad               Restore the marks from the previous Vim session. All
                        current marks are discarded.
:MarkLoad {slot}        Restore the marks stored in the named {slot}. All
                        current marks are discarded.

:MarkSave               Save the currently defined marks (or clear the
                        persisted marks if no marks are currently defined) for
                        use in a future Vim session.
:MarkSave {slot}        Save the currently defined marks in the named {slot}.
                        If {slot} is all UPPERCASE, the marks are persisted
                        and can be |:MarkLoad|ed in a future Vim session;
                        otherwise, you can just recall within the current
                        session. When no marks are currently defined, the
                        {slot} is cleared.

MARK INFORMATION
Both mark-highlighting and mark-searching commands print information about
the mark and search pattern, e.g.
        mark-1/\<pattern\>
This is especially useful when you want to add or subtract patterns to a mark
highlight group via [N].

:Marks                  List all mark highlight groups and the search patterns
                        defined for them.
                        The group that will be used for the next :Mark or
                        <Leader>m command (with [N]) is shown with a ">".
                        The last mark used for a search (via <Leader>*) is
                        shown with a "/".

MARK HIGHLIGHTING PALETTES
The plugin comes with three predefined palettes: original, extended, and
maximum. You can dynamically toggle between them, e.g. when you need more
marks or a different set of colors.

:MarkPalette {palette}  Highlight existing and future marks with the colors
                        defined in {palette}. If the new palette contains less
                        mark groups than the current one, the additional marks
                        are lost.
                        You can use :command-completion for {palette}.
